"My current Vim configuration
"
"I'm collecting the best solutions which I can find on the net,
"sometimes with original comments (there is no reason to fix
"good stuff). Thank you all Vim Masters for all this job and
"making my life easier.
"
"@author Jan Dudulski
"@see    http://github.com/jandudulski

let g:pathogen_disabled = []

"Load pathogen managed plugins
execute pathogen#infect()
syntax on
filetype plugin indent on

"Prevents some security exploits
set modelines=0

"Use utf-8
set encoding=utf-8

"Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible

"Switch mapleader from \ to ,
let mapleader=","

"Shortcut for edit/reload vimrc
nnoremap <silent> <Leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <Leader>rv :so $MYVIMRC<CR>

"Improves screen redrawing
set ttyfast

"Store lots of undos
set undolevels=1000
set undofile

set showcmd    "show incomplete cmds down the bottom
set showmode   "show current mode down the bottom

"Set regex into Perl formatting
nnoremap / /\v
vnoremap / /\v
set hlsearch    "highlight searches by default
set ignorecase  "not case sensitive
set smartcase   "try to match case if can
set gdefault    "global for default

set number         "add line numbers
set relativenumber "relative line numbers
set cursorline     "highlight current line
set cursorcolumn   "highlight current column
set showbreak=â†ª
set list
set wrap linebreak
set iskeyword+=-   "treat - as a part of word

"End of line
if v:version >= 703
  set colorcolumn=80 "do not cross the red line!
else
  if has("autocmd")
    autocmd BufRead * highlight OverLenght ctermbg=darkgrey guibg=#592929
    autocmd BufRead * match OverLenght /\%79v.*/
  endif
endif

"Add some line space for easy reading
set linespace=0
"Add some space below and over the cursor
set scrolloff=3

"Disable visual bell
set visualbell t_vb=

"Yank/Paste to the OS clipboard with ,y and ,p
nnoremap <Leader>y "+Y
vnoremap <Leader>y "+y
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
"Visually select the text that was last edited/pasted (Vimcast#26)
noremap gV `[v`]
" Easy expansion of the active file directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

"Statusline setup
set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/

"Turn off needless toolbar on gvim
set guioptions-=T

"Recalculate the tab warning flag when idle and after writing
autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning
"Return '[&et]' if &et set wrong
"Return '[mixed-indenting]' if spaces and tabs are used to indent
"Return '' if everything is fine
function! StatuslineTabWarning()
  if !exists("b:statusline_tab_warning")
    let tabs = search('^\t', 'nw') != 0
    let spaces = search('^ ', 'nw') != 0

    if tabs && spaces
      let b:statusline_tab_warning = '[mixed-indenting]'
    elseif (spaces && !&et) || (tabs && &et)
      let b:statusline_tab_warning = '[&et]'
    else
      let b:statusline_tab_warning = ''
    endif
  endif
  return b:statusline_tab_warning
endfunction

"Indent settings
set tabstop=2      "two characters space for tab
set shiftwidth=2   "two spaces for autoindent
set softtabstop=2  "two spaces when pressing tab
set expandtab      "use spaces instead of tabs
set copyindent     "copy last indent

"Folding settings
set nofoldenable
set foldlevel=1          "default fold from second level
set foldcolumn=2         "display fold levels at side of window
set foldminlines=3       "don't fold tiny things
set foldmethod=indent    "fold based on indent
set foldnestmax=3        "deepest fold is 3 levels

"Wild menu
set wildmenu               "enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=list:full     "make cmdline tab completion similar to bash
set wildignore=*.o,*.obj,*~,*.pyc,*/.hg/*,*/.svn/*,*/vendor/cache/*,*/public/system/*,*/tmp/*,*/log/*,*/.jhw-cache/*,*/solr/data/*,*/node_modules/*,*/.DS_Store,*/source_maps/*,*/spec/reports/*


"Some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

"Hide buffers when not displayed
set hidden
"Buffers as tabs
set switchbuf=usetab,newtab
"Don't use backup files
set nobackup
set noswapfile
nnoremap <C-d> :bdelete<CR>

set background=dark
colorscheme solarized

"Has gui
if has("gui_running")
  set guitablabel=%M%t
  set guifont=Inconsolata\ 12
  set columns=120
  set lines=35

  if has("gui_gnome")
  endif

  if has("gui_macvim")
    set guifont=Inconsolata:h18
  endif

  if has("gui_win32") || has("gui_win32s")
  endif
endif

"Has autocmd
if has("autocmd")
  autocmd FileType html,htmldjango setlocal textwidth=0

  autocmd BufEnter *.hamlc set filetype=haml
  autocmd BufEnter *.slim set filetype=slim
  " non ruby files which are ruby
  autocmd BufEnter Gemfile,Gemfile.lock,Guardfile,Rakefile,Procfile,*.rake set filetype=ruby

  "missing html5 tags for erb
  autocmd BufRead *.erb syn keyword htmlTagName contained article aside audio canvas command
  autocmd BufRead *.erb syn keyword htmlTagName contained datalist details dialog embed figcaption figure footer
  autocmd BufRead *.erb syn keyword htmlTagName contained header hgroup keygen mark meter menu nav output
  autocmd BufRead *.erb syn keyword htmlTagName contained progress time ruby rt rp section source summary time track video
  autocmd BufRead *.erb syn keyword htmlTagName contained wbr bdi

  " remove trailing white spaces
  autocmd BufWritePre * :%s/\s\+$//e

  " Help File speedups, <enter> to follow tag, delete for back
  autocmd filetype help nnoremap <buffer><CR> <c-]>
  autocmd filetype help nnoremap <buffer><BS> <c-T>
  autocmd filetype help nnoremap <buffer>q :q<CR>
  set splitbelow
  autocmd filetype help wincmd _ " Maximize the help on open

  "Auto-clean fugitive buffers (Vimcast#34)
  autocmd BufReadPost fugitive://* set bufhidden=delete
endif

"Arrow keys
nnoremap <Up> <C-p>
nnoremap <Down> <C-n>
nnoremap <Left> <nop>
nnoremap <Right> <nop>
inoremap <Up> <C-p>
inoremap <Down> <C-n>
inoremap <Left> <nop>
inoremap <Right> <nop>

"""""""""""""""
"F<n> bindings"
"""""""""""""""
"F1 = <ESC>
" I can type :help on my own, thanks.
noremap <F1> <Esc>
"Paste mode prevents insane pasting from another file
set pastetoggle=<F2>
"Bufexplorer
nnoremap <silent> <F2> :CtrlPBuffer<CR>
"tagbar
nnoremap <silent> <F4> :TagbarToggle<CR>
"Gundo
nnoremap <F5> :GundoToggle<CR>
"Sort css
nnoremap <F8> :g#\({\n\)\@<=#.,/}/sort<CR>

"""""""""""""""""""""""
"Plugins configuration"
"""""""""""""""""""""""
"Syntastic
let g:syntastic_enable_signs=1               "mark syntax errors with :signs

" search for any tags file
set tags=tags;$HOME

"CtrlP
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_working_path_mode = 'rc'
let g:ctrlp_dotfiles = 1

"Grep
let g:Grep_Find_Use_Xargs = 0
let g:Grep_Skip_Dirs = '.git tmp RCS CVS SCCS'

"YankRing
nnoremap <silent> <Leader>c :YRShow<CR>

"Rails
let g:rails_projections = {
  \ "config/projections.json": {
  \   "command": "projections"
  \ }
  \}

let g:rails_gem_projections = {
  \ "draper": {
  \   "app/decorators/*_decorator.rb": {
  \     "command": "decorator",
  \     "affinity": "model",
  \     "test": ["spec/decorators/%s_decorator_spec.rb", "test/decorators/%s_decorator_test.rb"],
  \     "related": "app/models/%i.rb",
  \     "template": "class %SDecorator < Draper::Decorator\nend"
  \   }
  \ },
  \ "factory_girl_rails": {
  \   "spec/factories/*.rb": {
  \     "command": "factory",
  \     "affinity": "collection",
  \     "alternate": "app/models/%i.rb",
  \     "related": "db/schema.rb#%s",
  \     "test": "spec/models/%i_spec.rb",
  \     "template": "FactoryGirl.define do\n  factory :%i do\n  end\nend",
  \     "keywords": "factory sequence"
  \   },
  \   "test/factories/*.rb": {
  \     "command": "factory",
  \     "affinity": "collection",
  \     "alternate": "app/models/%i.rb",
  \     "related": "db/schema.rb#%s",
  \     "test": "test/models/%i_test.rb",
  \     "template": "FactoryGirl.define do\n  factory :%i do\n  end\nend",
  \     "keywords": "factory sequence"
  \   }
  \ },
  \ "roar": {
  \   "app/representers/*_representer.rb": {
  \     "command": "representer",
  \     "affinity": "model",
  \     "test": ["spec/representers/%s_representer_spec.rb", "test/representers/%s_representer_test.rb"],
  \     "related": "app/models/%i.rb",
  \     "template": "require 'roar/representer/json'\n\nmodule %SRepresenter\n  include Roar::Representer::JSON\nend"
  \   }
  \ }
  \}
