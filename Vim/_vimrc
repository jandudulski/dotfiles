"My current Vim configuration
"
"I'm collecting the best solutions which I can find on the net,
"sometimes with original comments (there is no reason to fix
"good stuff). Thank you all Vim Masters for all this job and
"making my life easier.
"
"@author Jan Dudulski
"@see    http://github.com/jandudulski

"necessary on some Linux distros for pathogen to properly load bundles
filetype off

"load pathogen managed plugins
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

"Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

"store lots of :cmdline history and undos
set history=1000
set undolevels=1000

set showcmd    "show incomplete cmds down the bottom
set showmode   "show current mode down the bottom

set incsearch  "find the next match as we type search
set hlsearch   "highlight searches by default

set number     "add line numbers
set showbreak=â†ª
set wrap linebreak nolist

"add some line space for easy reading
set linespace=4

"disable visual bell
set visualbell t_vb=

"make possible to navigate within lines of wrapped lines
nmap <Down> gj
nmap <Up> gk

" fold wrapped lines
set fo=1

"statusline setup
set statusline=%f                                             "tail of the filename
set statusline+=\ %{fugitive#statusline()}                      "Git
set statusline+=%{exists('g:loaded_rvm')?rvm#statusline():''} "RVM
set statusline+=%=                                            "left/right separator
set statusline+=%c,                                           "cursor column
set statusline+=%l/%L                                         "cursor line/total lines
set statusline+=\ %P                                          "percent through file
set laststatus=2

"turn off needless toolbar on gvim
set guioptions-=T

"recalculate the trailing whitespace warning when idle, and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

"return '[\s]' if trailing white space is detected
"return '' otherwise
function! StatuslineTrailingSpaceWarning()
  if !exists("b:statusline_trailing_space_warning")
    if search('\s\+$', 'nw') != 0
      let b:statusline_trailing_space_warning = '[\s]'
    else
      let b:statusline_trailing_space_warning = ''
    endif
  endif
  return b:statusline_trailing_space_warning
endfunction

"recalculate the tab warning flag when idle and after writing
autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

"return '[&et]' if &et set wrong
"return '[mixed-indenting]' if spaces and tabs are used to indent
"return '' if everything is fine
function! StatuslineTabWarning()
  if !exists("b:statusline_tab_warning")
    let tabs = search('^\t', 'nw') != 0
    let spaces = search('^ ', 'nw') != 0

    if tabs && spaces
      let b:statusline_tab_warning = '[mixed-indenting]'
    elseif (spaces && !&et) || (tabs && &et)
      let b:statusline_tab_warning = '[&et]'
    else
      let b:statusline_tab_warning = ''
    endif
  endif
  return b:statusline_tab_warning
endfunction

"indent settings
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

"folding settings
set foldmethod=indent    "fold based on indent
set foldnestmax=3        "deepest fold is 3 levels
set nofoldenable         "disable on default

set wildmode=list:longest  "make cmdline tab completion similar to bash
set wildmenu               "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~,*.pyc

"load ftplugins and indent files
filetype plugin on
filetype indent on

"turn on syntax highlighting
syntax on

"some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

"hide buffers when not displayed
set hidden

"plugins configuration
noremap <silent> <F7> :NERDTreeToggle<CR>
