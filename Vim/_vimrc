"My current Vim configuration
"
"I'm collecting the best solutions which I can find on the net,
"sometimes with original comments (there is no reason to fix
"good stuff). Thank you all Vim Masters for all this job and
"making my life easier.
"
"@author Jan Dudulski
"@see    http://github.com/jandudulski

"Necessary on some Linux distros for pathogen to properly load bundles
filetype off

"Load pathogen managed plugins
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

"Prevents some security exploits
set modelines=0

"Load ftplugins and indent files
filetype plugin on
filetype indent on

"Use utf-8
set encoding=utf-8

"Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible

"Switch mapleader from \ to ,
let mapleader=","

"Shortcut for edit/reload vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>rv :so $MYVIMRC<CR>
"Reopen with root privilege
cmap w!! w !sudo tee % >/dev/null

"Allow backspacing over everything in insert mode
set backspace=indent,eol,start
"Improves screen redrawing
set ttyfast

"Store lots of :cmdline history and undos
set history=1000
set undolevels=1000

set showcmd    "show incomplete cmds down the bottom
set showmode   "show current mode down the bottom

"Set regex into Perl formatting
nnoremap / /\v
vnoremap / /\v
set incsearch   "find the next match as we type search
set hlsearch    "highlight searches by default
set ignorecase  "not case sensitive
set smartcase   "try to match case if can
set gdefault    "global for default
"Clear highlight
nmap <silent> ,/ :nohlsearch<CR>

set number         "add line numbers
set relativenumber "relative line numbers
set cursorline     "highlight current line
set cursorcolumn   "highlight current column
set showbreak=↪
set list
set listchars=tab:>-,trail:.,extends:>,nbsp:·,eol:¬
set wrap linebreak

"End of line
if v:version >= 703
  set colorcolumn=80 "do not cross the red line!

  if has("autocmd")
    "Set filetype specific end column
    autocmd filetype php set colorcolumn=81
  endif
else
  if has("autocmd")
    autocmd BufRead * highlight OverLenght ctermbg=darkgrey guibg=#592929
    autocmd BufRead * match OverLenght /\%79v.*/
  endif
endif

"Add some line space for easy reading
set linespace=0
"Add some space below and over the cursor
set scrolloff=3

"Disable visual bell
set visualbell t_vb=

"Make possible to navigate within lines of wrapped lines
nmap <Down> gj
nmap <Up> gk
"Yank/Paste to the OS clipboard with ,y and ,p and Ctrl-V
nmap <leader>y "+Y
vmap <leader>y "+y
nmap <leader>p "+p
nmap <leader>P "+P
imap <C-v> <esc>"+pi
"Bubble sinle lines (Vimcast#26)
nmap <C-Up> [e
nmap <C-Down> ]e
"Bubble multiple lines (Vimcast#26)
vmap <C-Up> [egv
vmap <C-Down> ]egv
"Visually select the text that was last edited/pasted (Vimcast#26)
nmap gV `[v`]

"Change current working directory whenever open file
set autochdir

"Paste mode prevents insane pasting from another file
set pastetoggle=<F2>

"Statusline setup
set statusline=%f                                             "tail of the filename
set statusline+=\ %{fugitive#statusline()}                    "git
set statusline+=%{exists('g:loaded_rvm')?rvm#statusline():''} "rvm
set statusline+=%=                                            "left/right separator
set statusline+=%c,                                           "cursor column
set statusline+=%l/%L                                         "cursor line/total lines
set statusline+=\ %P                                          "percent through file
set laststatus=2

"Turn off needless toolbar on gvim
set guioptions-=T

"Recalculate the trailing whitespace warning when idle, and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

"Return '[\s]' if trailing white space is detected
"Return '' otherwise
function! StatuslineTrailingSpaceWarning()
  if !exists("b:statusline_trailing_space_warning")
    if search('\s\+$', 'nw') != 0
      let b:statusline_trailing_space_warning = '[\s]'
    else
      let b:statusline_trailing_space_warning = ''
    endif
  endif
  return b:statusline_trailing_space_warning
endfunction

"Recalculate the tab warning flag when idle and after writing
autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

"Return '[&et]' if &et set wrong
"Return '[mixed-indenting]' if spaces and tabs are used to indent
"Return '' if everything is fine
function! StatuslineTabWarning()
  if !exists("b:statusline_tab_warning")
    let tabs = search('^\t', 'nw') != 0
    let spaces = search('^ ', 'nw') != 0

    if tabs && spaces
      let b:statusline_tab_warning = '[mixed-indenting]'
    elseif (spaces && !&et) || (tabs && &et)
      let b:statusline_tab_warning = '[&et]'
    else
      let b:statusline_tab_warning = ''
    endif
  endif
  return b:statusline_tab_warning
endfunction

"Indent settings
set tabstop=2      "two characters space for tab
set shiftwidth=2   "two spaces for autoindent
set softtabstop=2  "two spaces when pressing tab
set expandtab      "use spaces instead of tabs
set autoindent
set copyindent     "copy last indent
set shiftround     "keep multiple indenting

"Folding settings
set foldenable           "enable on default
set foldlevel=1          "default fold from second level
set foldcolumn=2         "display fold levels at side of window
"set foldclose=all        "automatically close folds
set foldminlines=3       "don't fold tiny things
set foldmethod=indent    "fold based on indent
set foldnestmax=3        "deepest fold is 3 levels

"Wild menu
set wildmenu               "enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=list:full     "make cmdline tab completion similar to bash
set wildignore=*.o,*.obj,*~,*.pyc

"Turn on syntax highlighting
syntax on

"Some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

"Hide buffers when not displayed
set hidden
"Buffers as tabs
set switchbuf=usetab,newtab
"Don't use backup files
set nobackup
set noswapfile

"Has gui
if has("gui_running")
  "Tell the term has 256 colors
  set t_Co=256

  "colorscheme mustang
  "colorscheme bespin
  set background=dark
  colorscheme solarized

  set guitablabel=%M%t
  "set guifont=Praxis\ 10
  set guifont=Inconsolata\ 12
  set columns=120
  set lines=35

  if has("gui_gnome")
  endif

  if has("gui_mac")
  endif

  if has("gui_win32") || has("gui_win32s")
  endif
endif

"Has autocmd
if has("autocmd")
  autocmd filetype php setlocal tabstop=4
  autocmd filetype php setlocal shiftwidth=4
  autocmd filetype php setlocal softtabstop=4

  autocmd BufEnter *.phtml set filetype=html

  "Save on focus lost
  autocmd FocusLost ? :wa
endif

"""""""""""""""
"F<n> bindings"
"""""""""""""""
"Bufexplorer
nnoremap <silent> <F2> :BufExplorer<CR>
"taglist
"nnoremap <silent> <F4> :TlistToggle<CR>
"tagbar
nnoremap <silent> <F4> :TagbarToggle<CR>
"Gundo
nnoremap <F5> :GundoToggle<CR>
"NERDTree
nnoremap <silent> <F7> :NERDTreeToggle<CR>
"YankRing
nnoremap <silent> <F11> :YRShow<CR>

"""""""""""""""""""""""
"Plugins configuration"
"""""""""""""""""""""""
"NERDTree
let NERDTreeBookmarksFile=expand("$HOME/.vim/NERDTreeBookmarks")
let NERDTreeShowBookmarks=1 "show bookmarks on startup
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeHighlightCursorline=1
let NERDTreeMouseMode=2     "fold/unfold dirs and dbl-click for open
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '\.svn$', '\.sass-cache$' ]

"Syntastic
let g:syntastic_enable_signs=1               "mark syntax errors with :signs

" taglist and ctags conf
let Tlist_Ctags_Cmd = "/usr/bin/ctags"
let Tlist_Use_Horiz_Window = 0 " open TagList in the sidebar
let Tlist_Use_Right_Window = 1 " on the right
let Tlist_Close_On_Select = 1 " close sidebar on select
let Tlist_Process_File_Always = 1 " process file in background
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Exit_OnlyWindow = 1 " Exit if TagList is only opend
let Tlist_Show_One_File = 1 " Show tags only from current file
let Tlist_WinWidth = 50
let Tlist_Sort_Type = "name" " Sort names in alphabetically order
let Tlist_Enable_Fold_Column=0 "do not show fold level column

" search for any tags file
set tags=tags;$HOME

"Ack
let g:ackprg="ack-grep -H --nocolor --nogroup --column"

