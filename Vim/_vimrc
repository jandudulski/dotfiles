"My current Vim configuration
"
"I'm collecting the best solutions which I can find on the net,
"sometimes with original comments (there is no reason to fix
"good stuff). Thank you all Vim Masters for all this job and
"making my life easier.
"
"@author Jan Dudulski
"@see    http://github.com/jandudulski

"Necessary on some Linux distros for pathogen to properly load bundles
filetype off

let g:pathogen_disabled = []

if !has('gui_running')
  " css color drastically slows down in terminal
  call add(g:pathogen_disabled, 'css-color')
endif

"Load pathogen managed plugins
call pathogen#infect()

"Prevents some security exploits
set modelines=0

"Load ftplugins and indent files
filetype plugin on
filetype indent on

"Use utf-8
set encoding=utf-8

"Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible

"Switch mapleader from \ to ,
let mapleader=","

"Shortcut for edit/reload vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>rv :so $MYVIMRC<CR>

"Allow backspacing over everything in insert mode
set backspace=indent,eol,start
"Improves screen redrawing
set ttyfast

"Store lots of :cmdline history and undos
set history=1000
set undolevels=1000

set showcmd    "show incomplete cmds down the bottom
set showmode   "show current mode down the bottom

"Set regex into Perl formatting
nnoremap / /\v
vnoremap / /\v
set incsearch   "find the next match as we type search
set hlsearch    "highlight searches by default
set ignorecase  "not case sensitive
set smartcase   "try to match case if can
set gdefault    "global for default
"Clear highlight
nmap <silent> ,/ :nohlsearch<CR>

set number         "add line numbers
set relativenumber "relative line numbers
set cursorline     "highlight current line
set cursorcolumn   "highlight current column
set showbreak=↪
set list
set listchars=tab:>-,trail:.,extends:>,nbsp:·,eol:¬
set wrap linebreak
set iskeyword+=-   "treat - as a part of word

"End of line
if v:version >= 703
  set colorcolumn=80 "do not cross the red line!

  if has("autocmd")
    "Set filetype specific end column
    autocmd filetype php set colorcolumn=81
  endif
else
  if has("autocmd")
    autocmd BufRead * highlight OverLenght ctermbg=darkgrey guibg=#592929
    autocmd BufRead * match OverLenght /\%79v.*/
  endif
endif

"Add some line space for easy reading
set linespace=0
"Add some space below and over the cursor
set scrolloff=3

"Disable visual bell
set visualbell t_vb=

"Make possible to navigate within lines of wrapped lines
noremap <Up> gk
noremap <Down> gj
"Yank/Paste to the OS clipboard with ,y and ,p and Ctrl-V
nnoremap <Leader>y "+Y
vnoremap <Leader>y "+y
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
"Bubble sinle lines (Vimcast#26)
nnoremap <C-Up> [e
nnoremap <C-Down> ]e
"Bubble multiple lines (Vimcast#26)
vnoremap <C-Up> [egv
vnoremap <C-Down> ]egv
"Visually select the text that was last edited/pasted (Vimcast#26)
noremap gV `[v`]
" Easy expansion of the active file directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" I can type :help on my own, thanks.
noremap <F1> <Esc>

"Change current working directory whenever open file
set autochdir

"Paste mode prevents insane pasting from another file
set pastetoggle=<F2>

"Statusline setup
set statusline=%f                                             "tail of the filename
set statusline+=\ %{fugitive#statusline()}                    "git
set statusline+=%{exists('g:loaded_rvm')?rvm#statusline():''} "rvm
set statusline+=%=                                            "left/right separator
set statusline+=%c,                                           "cursor column
set statusline+=%l/%L                                         "cursor line/total lines
set statusline+=\ %P                                          "percent through file
set laststatus=2

"Turn off needless toolbar on gvim
set guioptions-=T

"Recalculate the trailing whitespace warning when idle, and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

"Return '[\s]' if trailing white space is detected
"Return '' otherwise
function! StatuslineTrailingSpaceWarning()
  if !exists("b:statusline_trailing_space_warning")
    if search('\s\+$', 'nw') != 0
      let b:statusline_trailing_space_warning = '[\s]'
    else
      let b:statusline_trailing_space_warning = ''
    endif
  endif
  return b:statusline_trailing_space_warning
endfunction

"Recalculate the tab warning flag when idle and after writing
autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

"Return '[&et]' if &et set wrong
"Return '[mixed-indenting]' if spaces and tabs are used to indent
"Return '' if everything is fine
function! StatuslineTabWarning()
  if !exists("b:statusline_tab_warning")
    let tabs = search('^\t', 'nw') != 0
    let spaces = search('^ ', 'nw') != 0

    if tabs && spaces
      let b:statusline_tab_warning = '[mixed-indenting]'
    elseif (spaces && !&et) || (tabs && &et)
      let b:statusline_tab_warning = '[&et]'
    else
      let b:statusline_tab_warning = ''
    endif
  endif
  return b:statusline_tab_warning
endfunction

"Indent settings
set tabstop=2      "two characters space for tab
set shiftwidth=2   "two spaces for autoindent
set softtabstop=2  "two spaces when pressing tab
set expandtab      "use spaces instead of tabs
set autoindent
set copyindent     "copy last indent
set shiftround     "keep multiple indenting

"Folding settings
set nofoldenable
set foldlevel=1          "default fold from second level
set foldcolumn=2         "display fold levels at side of window
"set foldclose=all        "automatically close folds
set foldminlines=3       "don't fold tiny things
set foldmethod=indent    "fold based on indent
set foldnestmax=3        "deepest fold is 3 levels

"Wild menu
set wildmenu               "enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=list:full     "make cmdline tab completion similar to bash
set wildignore=*.o,*.obj,*~,*.pyc

"Turn on syntax highlighting
syntax on

"Some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

"Hide buffers when not displayed
set hidden
"Buffers as tabs
set switchbuf=usetab,newtab
"Don't use backup files
set nobackup
set noswapfile

"Tell the term has 256 colors
set t_Co=256

set background=dark
colorscheme solarized

"Has gui
if has("gui_running")
  set guitablabel=%M%t
  "set guifont=Praxis\ 10
  set guifont=Inconsolata\ 12
  set columns=120
  set lines=35

  if has("gui_gnome")
  endif

  if has("gui_macvim")
    set guifont=Inconsolata:h18
  endif

  if has("gui_win32") || has("gui_win32s")
  endif
endif

"Has autocmd
if has("autocmd")
  autocmd FileType html,htmldjango setlocal textwidth=0
  autocmd FileType php,python,xml,html,htmldjango setlocal tabstop=4
  autocmd FileType php,python,xml,html,htmldjango setlocal shiftwidth=4
  autocmd FileType php,python,xml,html,htmldjango setlocal softtabstop=4

  autocmd BufEnter *.phtml set filetype=html
  autocmd BufEnter *.hamlc set filetype=haml
  " non ruby files which are ruby
  autocmd BufEnter Gemfile,Gemfile.lock,Guardfile,Rakefile,Procfile,*.rake set filetype=ruby

  "autocompletion per type
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

  "missing html5 tags for erb
  autocmd BufRead *.erb syn keyword htmlTagName contained article aside audio canvas command
  autocmd BufRead *.erb syn keyword htmlTagName contained datalist details dialog embed figcaption figure footer
  autocmd BufRead *.erb syn keyword htmlTagName contained header hgroup keygen mark meter menu nav output
  autocmd BufRead *.erb syn keyword htmlTagName contained progress time ruby rt rp section source summary time track video
  autocmd BufRead *.erb syn keyword htmlTagName contained wbr bdi

  " remove trailing white spaces
  autocmd BufWritePre * :%s/\s\+$//e
endif

"Disable arrow keys
"nnoremap <up> <nop>
"nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

"""""""""""""""
"F<n> bindings"
"""""""""""""""
"F1 = <ESC>
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
"Bufexplorer
nnoremap <silent> <F2> :BufExplorer<CR>
"Sort css
nnoremap <F8> :g#\({\n\)\@<=#.,/}/sort<CR>
"tagbar
nnoremap <silent> <F4> :TagbarToggle<CR>
"Gundo
nnoremap <F5> :GundoToggle<CR>
"NERDTree
nnoremap <silent> <F7> :NERDTreeToggle<CR>

"""""""""""""""""""""""
"Plugins configuration"
"""""""""""""""""""""""
"NERDTree
let NERDTreeBookmarksFile=expand("$HOME/.vim/NERDTreeBookmarks")
let NERDTreeShowBookmarks=1 "show bookmarks on startup
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeHighlightCursorline=1
let NERDTreeMouseMode=2     "fold/unfold dirs and dbl-click for open
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '\.svn$', '\.sass-cache$', '\.git$' ]

"Syntastic
let g:syntastic_enable_signs=1               "mark syntax errors with :signs

"Tagbar
let g:tagbar_ctags_bin = "/usr/local/bin/ctags"

" search for any tags file
set tags=tags;$HOME

"CtrlP
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_working_path_mode = 'rc'

"Grep
let g:Grep_Find_Use_Xargs = 0
let g:Grep_Skip_Dirs = '.git tmp RCS CVS SCCS'

"YankRing
nnoremap <silent> <Leader>c :YRShow<CR>
