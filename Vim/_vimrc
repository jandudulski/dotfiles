"My current Vim configuration
"
"I'm collecting the best solutions which I can find on the net,
"sometimes with original comments (there is no reason to fix
"good stuff). Thank you all Vim Masters for all this job and
"making my life easier.
"
"@author Jan Dudulski
"@see    http://github.com/jandudulski

"Necessary on some Linux distros for pathogen to properly load bundles
filetype off

"Load pathogen managed plugins
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

"Load ftplugins and indent files
filetype plugin on
filetype indent on

"Use utf-8
set encoding=utf-8

"Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible

"Switch mapleader from \ to ,
let mapleader=","

"Shortcut for edit/reload vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>rv :so $MYVIMRC<CR>
"Reopen with root privilege
cmap w!! w !sudo tee % >/dev/null

"Allow backspacing over everything in insert mode
set backspace=indent,eol,start

"Store lots of :cmdline history and undos
set history=1000
set undolevels=1000

set showcmd    "show incomplete cmds down the bottom
set showmode   "show current mode down the bottom

set incsearch                     "find the next match as we type search
set hlsearch                      "highlight searches by default
"Clear highlight
nmap <silent> ,/ :nohlsearch<CR>

set number        "add line numbers
set cursorline    "highlight current line
set cursorcolumn  "highlight current column
set showbreak=â†ª
set wrap linebreak nolist

"Add some line space for easy reading
set linespace=4

"Disable visual bell
set visualbell t_vb=

"Make possible to navigate within lines of wrapped lines
nmap <Down> gj
nmap <Up> gk
"Yank/Paste to the OS clipboard with ,y and ,p and Ctrl-V
nmap <leader>y "+Y
vmap <leader>y "+y
nmap <leader>p "+p
nmap <leader>P "+P
imap <C-v> <esc>"+pi

"Fold wrapped lines
set fo=1

"Change current working directory whenever open file
set autochdir

"Paste mode prevents insane pasting from another file
set pastetoggle=<F2>

"Statusline setup
set statusline=%f                                             "tail of the filename
set statusline+=\ %{fugitive#statusline()}                    "git
set statusline+=%{exists('g:loaded_rvm')?rvm#statusline():''} "rvm
set statusline+=%=                                            "left/right separator
set statusline+=%c,                                           "cursor column
set statusline+=%l/%L                                         "cursor line/total lines
set statusline+=\ %P                                          "percent through file
set laststatus=2

"Turn off needless toolbar on gvim
set guioptions-=T

"Recalculate the trailing whitespace warning when idle, and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

"Return '[\s]' if trailing white space is detected
"Return '' otherwise
function! StatuslineTrailingSpaceWarning()
  if !exists("b:statusline_trailing_space_warning")
    if search('\s\+$', 'nw') != 0
      let b:statusline_trailing_space_warning = '[\s]'
    else
      let b:statusline_trailing_space_warning = ''
    endif
  endif
  return b:statusline_trailing_space_warning
endfunction

"Recalculate the tab warning flag when idle and after writing
autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

"Return '[&et]' if &et set wrong
"Return '[mixed-indenting]' if spaces and tabs are used to indent
"Return '' if everything is fine
function! StatuslineTabWarning()
  if !exists("b:statusline_tab_warning")
    let tabs = search('^\t', 'nw') != 0
    let spaces = search('^ ', 'nw') != 0

    if tabs && spaces
      let b:statusline_tab_warning = '[mixed-indenting]'
    elseif (spaces && !&et) || (tabs && &et)
      let b:statusline_tab_warning = '[&et]'
    else
      let b:statusline_tab_warning = ''
    endif
  endif
  return b:statusline_tab_warning
endfunction

"Indent settings
set tabstop=2      "two characters space for tab
set shiftwidth=2   "two spaces for autoindent
set softtabstop=2  "two spaces when pressing tab
set expandtab      "use spaces instead of tabs
set autoindent
set copyindent     "copy last indent
set shiftround     "keep multiple indenting

"Folding settings
set foldmethod=indent    "fold based on indent
set foldnestmax=3        "deepest fold is 3 levels
set nofoldenable         "disable on default

set wildmode=list:longest  "make cmdline tab completion similar to bash
set wildmenu               "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~,*.pyc

"Turn on syntax highlighting
syntax on

"Some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

"Hide buffers when not displayed
set hidden
"Don't use backup files
set nobackup
set noswapfile

"Has gui
if has("gui_running")
  "Tell the term has 256 colors
  set t_Co=256

  colorscheme mustang
  set guitablabel=%M%t
  set lines=40
  set columns=115

  if has("gui_gnome")
    set term=gnome-256color
    set guifont=Praxis\ 12
  endif

  if has("gui_mac")
  endif

  if has("gui_win32") || has("gui_win32s")
  endif
endif

"""""""""""""""""""""""
"Plugins configuration"
"""""""""""""""""""""""
"NERDTree
noremap <silent> <F7> :NERDTreeToggle<CR>
let NERDTreeBookmarksFile=expand("$HOME/.vim/NERDTreeBookmarks")
let NERDTReeShowBookmarks=1 "show bookmarks on startup
let NERDTReeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeHighlightCursorline=1
let NERDTreeMouseMode=2     "fold/unfold dirs and dbl-click for open
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$' ]

"Syntastic
let g:syntastic_enable_signs=1               "mark syntax errors with :signs

